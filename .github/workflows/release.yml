name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation from git commits
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md

          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # First release, get all commits
            git log --pretty=format:"* %s (%h)" >> changelog.md
          else
            # Get commits since last tag
            git log ${LAST_TAG}..HEAD --pretty=format:"* %s (%h)" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${{ github.ref_name }}" >> changelog.md

          # Set output
          echo 'CHANGELOG<<EOF' >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: parlor-room-linux-amd64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: parlor-room-linux-amd64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: parlor-room-linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: parlor-room-macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: parlor-room-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: parlor-room-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib

          case ${{ matrix.target }} in
            x86_64-unknown-linux-musl)
              sudo apt-get install -y musl-tools
              ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
          esac

      - name: Build release binary
        run: |
          case ${{ matrix.target }} in
            aarch64-unknown-linux-gnu)
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              ;;
          esac

          cargo build --release --target ${{ matrix.target }} --all-features

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ${{ matrix.name }}.tar.gz parlor-room
          echo "ASSET_NAME=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.name }}.tar.gz" >> $GITHUB_ENV

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ${{ matrix.name }}.zip parlor-room.exe
          echo "ASSET_NAME=${{ matrix.name }}.zip" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.name }}.zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_content_type: application/octet-stream

  publish-checksums:
    name: Publish Checksums
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
            if [ -f "$file" ]; then
              echo "$(sha256sum "$file" | cut -d' ' -f1)  $(basename "$file")" >> checksums.txt
            fi
          done

          # If no files found in artifacts, create empty checksums
          if [ ! -f checksums.txt ]; then
            echo "# No artifacts found to checksum" > checksums.txt
          fi

      - name: Upload Checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: artifacts/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  update-docker-latest:
    name: Update Docker Latest Tag
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries]
    if: ${{ !contains(github.ref_name, '-') }} # Only for stable releases
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and push latest
        run: |
          # Pull the versioned image and retag as latest
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository }}:latest \
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
