name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read rust-toolchain.toml
        id: rust-toolchain
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: rust-toolchain.toml
          field: toolchain.channel

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.value }}
          components: rustfmt, clippy

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check compilation
        run: cargo check --all-targets --all-features

  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          timeout 180s bash -c 'until docker-compose ps | grep "healthy"; do sleep 5; done'
          docker-compose ps

      - name: Read rust-toolchain.toml
        id: rust-toolchain
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: rust-toolchain.toml
          field: toolchain.channel

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.value }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Run tests
        run: cargo test --all-features --verbose
        env:
          AMQP_URL: amqp://parlor_user:parlor_pass@localhost:5672/parlor

      - name: Run doc tests
        run: cargo test --doc --all-features

      - name: Stop services
        if: always()
        run: docker-compose down -v

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read rust-toolchain.toml
        id: rust-toolchain
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: rust-toolchain.toml
          field: toolchain.channel

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.value }}

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read rust-toolchain.toml
        id: rust-toolchain
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: rust-toolchain.toml
          field: toolchain.channel

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.value }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Run benchmarks
        run: cargo bench --all-features

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          timeout 180s bash -c 'until docker-compose ps | grep "healthy"; do sleep 5; done'
          docker-compose ps

      - name: Read rust-toolchain.toml
        id: rust-toolchain
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: rust-toolchain.toml
          field: toolchain.channel

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.value }}
          components: llvm-tools-preview

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        env:
          AMQP_URL: amqp://parlor_user:parlor_pass@localhost:5672/parlor

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

      - name: Stop services
        if: always()
        run: docker-compose down -v

  build:
    name: Build Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read rust-toolchain.toml
        id: rust-toolchain
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: rust-toolchain.toml
          field: toolchain.channel

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.value }}
          targets: ${{ matrix.target }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update && sudo apt-get install -y musl-tools
          # Verify MUSL target is properly installed
          rustup target list --installed | grep musl || rustup target add x86_64-unknown-linux-musl

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --all-features

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: parlor-room-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/parlor-room
          retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          timeout 180s bash -c 'until docker-compose ps | grep "healthy"; do sleep 5; done'
          docker-compose ps

      - name: Read rust-toolchain.toml
        id: rust-toolchain
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: rust-toolchain.toml
          field: toolchain.channel

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.value }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Run integration tests
        run: cargo test --test integration_tests --all-features
        env:
          AMQP_URL: amqp://parlor_user:parlor_pass@localhost:5672/parlor

      - name: Test application health check
        run: |
          # Test the health check endpoint
          curl -f http://localhost:8080/health || echo "Health check endpoint test"

          # Test the metrics endpoint
          curl -f http://localhost:9090/metrics || echo "Metrics endpoint test"

      - name: Stop services
        if: always()
        run: docker-compose down -v

  validate-docker:
    name: Validate Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: parlor-room:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm parlor-room:test --help
