name: Docker Build and Publish

on:
  push:
    branches:
      - main
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Parlor Room Matchmaking Service
            org.opencontainers.image.description=Production-ready matchmaking microservice for mahjong games
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  test-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    services:
      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for RabbitMQ
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:15672; do sleep 2; done'

      - name: Test image basic functionality
        run: |
          # Test help command
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --help

      - name: Test image configuration validation
        run: |
          # Test dry-run mode
          docker run --rm \
            -e AMQP_URL=amqp://guest:guest@host.docker.internal:5672/%2f \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --dry-run

      - name: Test health endpoints (smoke test)
        run: |
          # Start container in background
          docker run -d --name parlor-room-test \
            -p 8080:8080 \
            -p 9090:9090 \
            -e AMQP_URL=amqp://guest:guest@host.docker.internal:5672/%2f \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} &

          # Give it time to start
          sleep 10

          # Test health endpoints
          curl -f http://localhost:8080/health || echo "Health endpoint test"
          curl -f http://localhost:9090/metrics || echo "Metrics endpoint test"

          # Clean up
          docker stop parlor-room-test || true
          docker rm parlor-room-test || true

  update-readme:
    name: Update README with Image Info
    runs-on: ubuntu-latest
    needs: [build-and-push, test-image]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest image tag
        run: |
          # Update Docker image reference in README
          sed -i "s|ghcr.io/${{ github.repository }}:.*|ghcr.io/${{ github.repository }}:main|g" README.md

          # Check if there are changes
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add README.md
            git commit -m "docs: update Docker image reference [skip ci]"
            git push
          fi
